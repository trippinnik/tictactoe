<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tictactoe</name>
    </assembly>
    <members>
        <member name="T:tictactoe.Controllers.TicTacToe">
            <summary>
            Defines methods that implement the tictactoe resource
            </summary>
        </member>
        <member name="M:tictactoe.Controllers.TicTacToe.#ctor">
            <summary>
            initialize a new instance of the <see cref="T:tictactoe.Controllers.TicTacToe"/> class
            </summary>
        </member>
        <member name="M:tictactoe.Controllers.TicTacToe.Post(tictactoe.Models.GameBoard)">
             <summary>
             the post method for the execute which returns the gameboard and 
             </summary>
            <example>
            {
            "gameBoard":[
            "X",
            "X",
            "O",
            "?",
            "?",
            "?",
            "?",
            "?",
            "?"
            ]
             }
             </example>
             Post must be array of string, type gameBoard. Array must be length 9 and strings must be X, O or ?
        </member>
        <member name="T:tictactoe.Controllers.ExecuteMoveResponse">
            <summary>
            Defines the ExecuteMoveResponse
            </summary>
        </member>
        <member name="P:tictactoe.Controllers.ExecuteMoveResponse.Move">
            <summary>
            this is the position the azure api app service choose
            </summary>
            <value>
            value with be the number of the space on the gameboard or null if a tie or winner has occurred
            if a winner is not present then the move property shall contain the result after the move is applied
            </value>
        </member>
        <member name="P:tictactoe.Controllers.ExecuteMoveResponse.AzurePlayerSymbol">
            <summary>
            the symbol the azure player takes on. if player moves first and chooses O or azure moves first Azure shall be X
            </summary>
            <value>
            string X or O
            </value>
        </member>
        <member name="P:tictactoe.Controllers.ExecuteMoveResponse.Winner">
            <summary>
            indicates if there is a winner, tie or game is to continue
            </summary>
            <value>
            X, O, inconclussive (game is ongoing) or tie (all positions filled and no winner)
            </value>
        </member>
        <member name="P:tictactoe.Controllers.ExecuteMoveResponse.WinnerPositions">
            <summary>
            array containing the winning positions
            </summary>
            <value>
            array of int with 3 positions
            </value>
        </member>
        <member name="M:tictactoe.Controllers.ExecuteMoveResponse.ExecuteMove(tictactoe.Models.GameBoard)">
            <summary>
            Our game logic. Takes the post data. Applies logic. Returns the response
            </summary>
            <param name="gameBoard">Send a gameboard</param>
            
            <returns></returns>
        </member>
        <member name="M:tictactoe.Controllers.ExecuteMoveResponse.CheckWinner(System.String[])">
            <summary>
            check for winner. takes the gameboard
            </summary>
        </member>
        <member name="M:tictactoe.Controllers.ExecuteMoveResponse.CheckAzurePlayer(tictactoe.Models.GameBoard)">
            <summary>
            Receive the gameboard positions apply logic to determine the aZurePlayerSymbol
            </summary>
            <param name="gameBoard"></param>
        </member>
        <member name="M:tictactoe.Controllers.ExecuteMoveResponse.GenerateMove(tictactoe.Models.GameBoard)">
            <summary>
            Generate some logic to place the piece
            </summary>
            <param name="gameBoard"></param>
        </member>
        <member name="T:tictactoe.Models.GameBoard">
            <summary>
            object that will hold an array of strings
            </summary>
        </member>
        <member name="P:tictactoe.Models.GameBoard.gameBoard">
            <summary>
            Gameboard and array of strings with 9 slots
            
            </summary>
            <value>
            values may be X, O or ? for empty and length must be 9
            </value>
        </member>
        <member name="T:tictactoe.Models.GameBoardValidation">
            <summary>
            Validation of the gameboard
            must contain length string array 9
            only X, O or ?
            X and O must stay within turn rotation in numberg
            </summary>
        </member>
        <member name="M:tictactoe.Models.GameBoardValidation.IsValid">
            <summary>
            Returns bool for verification of the gameboard post data
            </summary>
            <returns></returns>
        </member>
        <member name="P:tictactoe.Models.GameBoardValidation.ErrorMessage">
            <summary>
            Holds a string for error message to be returned when post data does not match the schema
            </summary>
        </member>
        <member name="T:tictactoe.Startup">
            <summary>
            defines the configuration of the Web API application
            </summary>
        </member>
        <member name="M:tictactoe.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            initialize startup of the <see cref="T:tictactoe.Startup"/> class
            </summary>
            <param name="configuration"></param>
            <param name="hostingEnvironment"></param>
        </member>
        <member name="P:tictactoe.Startup.HostingEnvironment">
            <summary>
            Gets the hosting environment.
            </summary>
            <value>
            The hosting environment.
            </value>
        </member>
        <member name="P:tictactoe.Startup.Configuration">
            <summary>
            gets the configuration
            </summary>
            <value>
            the configuration
            </value>
        </member>
        <member name="M:tictactoe.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            this method is called at runtime. used for adding services to container
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:tictactoe.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            called at runtime. use to configure the HTTP pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
